/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Cogiananh;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author Tran Ngoc Tam
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    
    // for original image. this buffred image never change
    private  BufferedImage bufferedImage;
    
    // for draw buffered image after processing
    private BufferedImage processImage;
    
    // for drawing image 
    private BufferedImage image;
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelOriginal = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                System.out.println("Call to paint");
                if(bufferedImage!=null){
                    int x = this.getWidth();
                    int y = this.getHeight();
                    int ix = image.getWidth();
                    int iy = image.getHeight();
                    int dx,dy;
                    if(x / y > ix / iy){
                        dy = y;
                        dx = dy * ix / iy;
                    }else{
                        dx=x;
                        dy= dx * iy / ix;
                    }
                    ImageIcon icon = new ImageIcon(image.getScaledInstance(dx, dy, BufferedImage.SCALE_SMOOTH));
                    g.drawImage(icon.getImage(), 0, 0, null);
                }
            }
        };
        panelProcess = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                System.out.println("Call to paint");
                if(processImage!=null){
                    int x = this.getWidth();
                    int y = this.getHeight();
                    int ix = processImage.getWidth();
                    int iy = processImage.getHeight();
                    int dx,dy;
                    if(x / y > ix / iy){
                        dy = y;
                        dx = dy * ix / iy;
                    }else{
                        dx=x;
                        dy= dx * iy / ix;
                    }
                    ImageIcon icon = new ImageIcon(processImage.getScaledInstance(dx, dy, BufferedImage.SCALE_SMOOTH));
                    g.drawImage(icon.getImage(), 0, 0, null);
                }
            }
        };
        cbAlgorithm = new javax.swing.JComboBox();
        btnProcess = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        miChangeBackground = new javax.swing.JMenuItem();
        cbColor = new javax.swing.JCheckBoxMenuItem();
        cbGray = new javax.swing.JCheckBoxMenuItem();
        cbBinary = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelOriginalLayout = new javax.swing.GroupLayout(panelOriginal);
        panelOriginal.setLayout(panelOriginalLayout);
        panelOriginalLayout.setHorizontalGroup(
            panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );
        panelOriginalLayout.setVerticalGroup(
            panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelProcessLayout = new javax.swing.GroupLayout(panelProcess);
        panelProcess.setLayout(panelProcessLayout);
        panelProcessLayout.setHorizontalGroup(
            panelProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        panelProcessLayout.setVerticalGroup(
            panelProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cbAlgorithm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Erosion", "Dilation" }));
        cbAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAlgorithmActionPerformed(evt);
            }
        });

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        miOpen.setText("Open");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        jMenu3.add(miOpen);

        miSave.setText("Save");
        jMenu3.add(miSave);

        miExit.setText("Exit");
        jMenu3.add(miExit);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Option");

        miChangeBackground.setText("Change background");
        miChangeBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChangeBackgroundActionPerformed(evt);
            }
        });
        jMenu4.add(miChangeBackground);

        cbColor.setSelected(true);
        cbColor.setText("Color image");
        cbColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbColorActionPerformed(evt);
            }
        });
        jMenu4.add(cbColor);

        cbGray.setText("Gray image");
        cbGray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGrayActionPerformed(evt);
            }
        });
        jMenu4.add(cbGray);

        cbBinary.setText("Binary image");
        cbBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBinaryActionPerformed(evt);
            }
        });
        jMenu4.add(cbBinary);

        jMenuBar2.add(jMenu4);

        jMenu1.setText("Help");
        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcess))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelProcess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(cbAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(btnProcess)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelProcess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(135, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAlgorithmActionPerformed
        
    }//GEN-LAST:event_cbAlgorithmActionPerformed

    private void cbColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbColorActionPerformed
       selectCheckBox(evt);
    }//GEN-LAST:event_cbColorActionPerformed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
       JFileChooser chooser = new JFileChooser();
       int check = chooser.showOpenDialog(null);
       if(check==JFileChooser.APPROVE_OPTION){
           File file = chooser.getSelectedFile();
           try {
               bufferedImage= ImageIO.read(file);
               image = Dip.cloneBufferedImage(bufferedImage);
           } catch (IOException ex) {
               ex.printStackTrace();
           }
           this.repaint();
       }
       
    }//GEN-LAST:event_miOpenActionPerformed
    
    private void selectCheckBox(ActionEvent evt){
        if(evt.getSource()==cbColor){
            if(cbColor.isSelected()){
                cbGray.setSelected(false);
                cbBinary.setSelected(false);
            }
        }else if(evt.getSource()==cbGray){
            if(cbGray.isSelected()){
                cbColor.setSelected(false);
                cbBinary.setSelected(false);
            }
        }else if(evt.getSource()==cbBinary){
            if(cbBinary.isSelected()){
                cbColor.setSelected(false);
                cbGray.setSelected(false);
            }
        }
        if((!cbColor.isSelected()&& !cbGray.isSelected() && !cbBinary.isSelected())){
            cbColor.setSelected(true);
        }
    }
    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        String algorithm = cbAlgorithm.getSelectedItem().toString();
        System.out.println("Algorithm: "+algorithm);
        BufferedImage bi = Dip.cloneBufferedImage(bufferedImage);
        if(cbColor.isSelected()){  // color image
            bi = Dip.convertToGrayImage(bi); // convert to gray image
            bi = Dip.convertToBinaryImage(bi, 120); // convert to binary image with threshold  = 120
        }else if(cbGray.isSelected()){
            bi = Dip.convertToBinaryImage(bi, 120);
        }
        
        image = Dip.cloneBufferedImage(bi); // draw binary image in original
        if(algorithm.equals("Erosion")){
            processErosion(bi);
        }else{
            processDilation(bi);
        }
        this.repaint();
    }//GEN-LAST:event_btnProcessActionPerformed

    private void cbGrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGrayActionPerformed
        selectCheckBox(evt);
    }//GEN-LAST:event_cbGrayActionPerformed

    private void cbBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBinaryActionPerformed
       selectCheckBox(evt);
    }//GEN-LAST:event_cbBinaryActionPerformed

    private void miChangeBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miChangeBackgroundActionPerformed
        bufferedImage = Dip.convertToBinaryImage(image, 95);
        bufferedImage = Dip.convertBlackToWhite(bufferedImage);
        image = Dip.cloneBufferedImage(bufferedImage);
        repaint();
    }//GEN-LAST:event_miChangeBackgroundActionPerformed
    
    private void processErosion(BufferedImage bi){
        
        processImage = bi;
        System.out.println("Start private void processErosion()");
        Color[][] colorTable = Dip.getColorTable(bi);
        int height = processImage.getHeight();
        int width = processImage.getWidth();
        for(int i = 1;i<height-1;i++){
            
            for(int j = 1;j<width-1;j++){
                 int[][] squareMatrix = Dip.getMatrix(colorTable, j, i);
                 Color c ;
                 if(Dip.isFit(squareMatrix, Util.EROSION_ELEMENT_1, 1)){
                     c = new Color(255,255,255);
                 }else{
                     c = new Color(0,0,0);
                 }
                 processImage.setRGB(j, i, c.getRGB());
            }
        }
        System.out.println("End private void processErosion()");
    }
    
    private void processDilation(BufferedImage bi){
        processImage = bi;
        System.out.println("Start private void processDilation()");
        Color[][] colorTable = Dip.getColorTable(bi);
        int height = processImage.getHeight();
        int width = processImage.getWidth();
        for(int i = 1;i<height-1;i++){
            
            for(int j = 1;j<width-1;j++){
                 int[][] squareMatrix = Dip.getMatrix(colorTable, j, i);
                 Color c ;
                 if(Dip.isHit(squareMatrix, Util.EROSION_ELEMENT_1, 1)){
                     c = new Color(255,255,255);
                 }else{
                     c = new Color(0,0,0);
                 }
                 processImage.setRGB(j, i, c.getRGB());
            }
        }
        System.out.println("End private void processDilation()");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JComboBox cbAlgorithm;
    private javax.swing.JCheckBoxMenuItem cbBinary;
    private javax.swing.JCheckBoxMenuItem cbColor;
    private javax.swing.JCheckBoxMenuItem cbGray;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem miChangeBackground;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JPanel panelOriginal;
    private javax.swing.JPanel panelProcess;
    // End of variables declaration//GEN-END:variables
}
